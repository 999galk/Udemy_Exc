/*

AJAX

Problem: everytime the client gets a server response it refreshes, if you want to update the page you have to load everything all over again.

AJAX - allows you to read from a server and update without reloading it

single page application = you load a single "base" page and the content changed based on given data

How?
Web browsers implemented technology called XHR - XML HTTP REQUEST

event occurs on a web page(e.g sign in) -> XHR object is created using JS -> the XHR sends a request to the server -> the server proccess the request and sends a respons back to the web page -> the webpage reads it using JS changes only the relevant portion of the window  

Current way to do it: fetch!

fetch('https://jsonplaceholder.typicode.com/users')
			.then(response => response.json())
			.then(users =>{this.setState({robots : users})});

PROMISE

Before promise: callbacks

promise is an object that may produce a single value some time in the future - either a resolved value or a reason it was rejected

It allows to chain function, instead of having nested functions like we had with callbacks.
Its great for Asynchronous programming - if you want task to not block other functionalities you use promise so that the task runs at the background

possible status:
fullfiled
rejected
pending

*/

const promise = new Promise((resolve,reject)=> {
	if(true){
		resolve('all working');
	} else {
		reject ('Error!');
	} 
})

//new Promise is a built in es6 method

const promise2 = new Promise((resolve,reject)=> {
	setTimeout(resolve,100,'HII');
})

const promise3 = new Promise((resolve,reject)=> {
	setTimeout(resolve,300,'Next');
})

const promise2 = new Promise((resolve,reject)=> {
	setTimeout(resolve,5000,'Next Next');
})

//Promise.all takes an array of promises, and returns an array of all the results but it will give the response only after the latest one has finished. Meaning, if the latest one takes 5 seconds results will show up after 5 seconds

Promise.all([promise,promise2,promise3,promise4]).then(values => {
	console.log(values);
})


promise
	.then(result => { 
		throw Error
		return result + '!'
	})
	.then(result2 => {
		console.log(result2);
		return result2 + '?'
	})
	.then(result3 => {
		console.log(result2);
		return result2 + '?'
	})  
	.catch(() => console.log('error occured'))


// .catch - will catch any error you'd throw during the promise

//Real example with AJAX:

const urls = [
	'https://jsonplaceholder.typicode.com/posts',
	'https://jsonplaceholder.typicode.com/albums',
	'https://jsonplaceholder.typicode.com/users'
]

Promise.all(urls.map(url => {
	return fetch(url).then(response => response.json())
})).then(results => {
	console.log(results);
}).catch(() => console.log('error'))


// Solve the questions below:

// #1) Create a promise that resolves in 4 seconds and returns "success" string

const promise = new Promise((resolve,reject) => {
	setTimeout(resolve,4000,'success');
})

// #2) Run the above promise and make it console.log "success"

promise.then(value => console.log(value));

// #3) Read about Promise.resolve() and Promise.reject(). How can you make
// the above promise shorter with Promise.resolve() and console loggin "success"

Promise.resolve('success').then(value => console.log(value));

// #4) Catch this error and console log 'Ooops something went wrong'
Promise.reject('failed').catch(() => console.log('Ooops something went wrong'))

// #5) Use Promise.all to fetch all of these people from Star Wars (SWAPI) at the same time.
// Console.log the output and make sure it has a catch block as well.
const urls = [
  'https://swapi.co/api/people/1',
  'https://swapi.co/api/people/2',
  'https://swapi.co/api/people/3',
  'https://swapi.co/api/people/4'
]

Promise.all(urls.map(url => {
	return fetch(url).then(response => response.json())
})).then(values => console.log(values)).catch(()=> console.log('error fetching urls'));



// #6) Change one of your urls above to make it incorrect and fail the promise
// does your catch block handle it?

YES!